
from random import randrange
import sympy

def euclids_gcd(a, b):

	if b > a:
		a, b = b, a

	while a % b != 0:

	    a, b = b, a % b

	return b

def miller_rabin ( n, a ): # True implies n is composite

	# Test if n is even
	if not( n & 1 ):
		return True

	# Test if a divides n
	gcd = euclids_gcd( n, a )

	if (1 < gcd ) and ( gcd < n ):
		return True

	# Find q such that n - 1 = 2^k q

	q = n - 1
	k = 0
	while not( q & 1 ):
		q >>= 1
		k  += 1

	# Search for the existence of i such that a^( (2^i) q ) = -1 (mod p), i < k
	a = pow( a, q, n )

	if a == 1:
		return False

	for i in range( k ):

		if a == n-1:

			return False

		a = pow( a, 2, n )

	return True



binary = '''
100000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000111111111111111111111111111111111111111111000000000000000
000000000000000111111111111111111111111111111111111111111000000000000000
000000000000000111111111111111111111111111111111111111111000000000000000
000000000000000111111111111111111111111111111111111111111000000000000000
000000000000000111111111000000001111111100000000111111111000000000000000
000000000000000111111111000000001111111100000000111111111000000000000000
000000000000000000000000000000001111111100000000000000000000000000000000
000000000000000011111100000000001111111100011111110000001111111000000000
000000000000000111111110000000001111111100011111111000011111111000000000
000000000000000111111111000000001111111100001111111101111111110000000000
000000000000001111000111100000001111111100001111111111111111110000000000
000000000000011110000011110000001111111100001111011111110111110000000000
000000000000111111111111111000001111111100001111000111000111110000000000
000000000001111110000011111100001111111100011111100111000111111000000000
000000000011111100000011111110001111111100111111110000001111111100000000
000000000011111100000011111110001111111100111111110000001111111100000000
000000000000000000000000000000001111111100000000000000000000000000000000
000000000000000000000000000111111111111111111000000000000000000000000000
000000000000000000000000000111111111111111111000000000000000000000000000
000000000000000000000000000111111111111111111000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000001100101100011
'''

num = int( ''.join( binary.split() ), 2 )



failure = False

for _ in range( 1000 ):

	if miller_rabin( num, randrange( 1, num - 1 ) ):

		print ( "Oops. Ryan is an idiot." )

		failure = True

if not sympy.isprime( num ):

	print ( "Oops. Ryan is an idiot." )

	failure = True

if not failure:

	print ( "It's a prime." )


